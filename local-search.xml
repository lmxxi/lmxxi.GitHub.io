<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2022/04/23/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/04/23/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>整数型：byte（1字节）、short（2字节）、int（4字节）、long（8字节）<br>浮点数：float（4字节）、double（8字节）<br>字符型：char（2字节）<br>布尔型：boolean（1字节）<br><mark>（注：使用long要在数字后面加上后缀L，否则当作int处理）</mark>  </p><h3 id="基本类型和包装类区别"><a href="#基本类型和包装类区别" class="headerlink" title="基本类型和包装类区别"></a>基本类型和包装类区别</h3><ol><li><strong>成员变量</strong>包装类不赋值默认是null，基本类型不赋值默认是0  </li><li>包装类可以用作泛型，基本类型不可以  </li><li>作为<strong>局部变量</strong>的基本类型存在栈里，作为<strong>成员变量</strong>的基本类型存在堆里，包装类存在堆里（<strong>几乎</strong>所有对象都存在堆里）</li><li>基本类型占用空间更小</li></ol><h3 id="包装类的缓存机制"><a href="#包装类的缓存机制" class="headerlink" title="包装类的缓存机制"></a>包装类的缓存机制</h3><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2022/04/23/hello-world/"/>
    <url>/2022/04/23/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>整数型：byte（1字节）、short（2字节）、int（4字节）、long（8字节）<br>浮点数：float（4字节）、double（8字节）<br>字符型：char（2字节）<br>布尔型：boolean（1字节）<br><mark>（注：使用long要在数字后面加上后缀L，否则当作int处理）</mark>  </p><h3 id="基本类型和包装类区别"><a href="#基本类型和包装类区别" class="headerlink" title="基本类型和包装类区别"></a>基本类型和包装类区别</h3><ol><li><strong>成员变量</strong>包装类不赋值默认是null，基本类型不赋值默认是0  </li><li>包装类可以用作泛型，基本类型不可以  </li><li>作为<strong>局部变量</strong>的基本类型存在栈里，作为<strong>成员变量</strong>的基本类型存在堆里，包装类存在堆里（<strong>几乎</strong>所有对象都存在堆里）</li><li>基本类型占用空间更小</li></ol><h3 id="包装类的缓存机制"><a href="#包装类的缓存机制" class="headerlink" title="包装类的缓存机制"></a>包装类的缓存机制</h3><p> Byte,Short,Integer,Long 这 4 种包装类默认创建了数值 [-128，127] 的相应类型的缓存数据，Character 创建了数值在 [0,127] 范围的缓存数据，Boolean 直接返回 True or False<br> 如果没有超出范围，则复用已有缓存对象，否则创建新对象</p><h3 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h3><p>装箱：将基本类型用它们对应的引用类型包装起来；<br>&amp;emsp;Integer i &#x3D; 10 等价于 Integer i &#x3D; Integer.valueOf(10)<br>拆箱：将包装类型转换为基本数据类型；<br>&amp;emsp;int n &#x3D; i 等价于 int n &#x3D; i.intValue()</p><h3 id="接口和抽象类的共同点和区别"><a href="#接口和抽象类的共同点和区别" class="headerlink" title="接口和抽象类的共同点和区别"></a>接口和抽象类的共同点和区别</h3><p><strong>共同点：</strong>  </p><ol><li>都不能被实例化  </li><li>都可以有抽象方法  </li><li>都可以有默认实现的方法（Java 8 可以用 default 关键字在接口中定义默认方法）</li></ol><p><strong>区别：</strong>  </p><ol><li>接口主要对类的行为进行约束，实现了某个接口就拥有了其行为；抽象类更强调所属关系  </li><li><strong>一个类可以实现多个接口，但只能继承一个类</strong>  </li><li>接口的成员变量只能是<strong>public static final</strong>类型，不能被修改且有初始值；抽象类的变量不限制，并且可在子类中重新定义和赋值</li></ol><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><p><strong>浅拷贝：</strong> 在堆上创建一个新的对象，但如果对象的属性是引用类型，浅拷贝直接复制其引用地址，即<mark>拷贝对象和原对象共用同一个内部对象</mark><br><strong>深拷贝：</strong> 连同内部对象一同复制，即<mark>拷贝对象创建一个新的内部对象</mark></p><h3 id="Object类有哪些方法"><a href="#Object类有哪些方法" class="headerlink" title="Object类有哪些方法"></a>Object类有哪些方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash">/**<br> * native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。<br> */<br>public final native Class&lt;?&gt; getClass()<br>/**<br> * native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的HashMap。<br> */<br>public native int hashCode()<br>/**<br> * 用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写以用于比较字符串的值是否相等。<br> */<br>public boolean equals(Object obj)<br>/**<br> * naitive 方法，用于创建并返回当前对象的一份拷贝。<br> */<br>protected native Object <span class="hljs-built_in">clone</span>() throws CloneNotSupportedException<br>/**<br> * 返回类的名字实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。<br> */<br>public String toString()<br>/**<br> * native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。<br> */<br>public final native void notify()<br>/**<br> * native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。<br> */<br>public final native void notifyAll()<br>/**<br> * native方法，并且不能重写。暂停线程的执行。注意：<span class="hljs-built_in">sleep</span> 方法没有释放锁，而 <span class="hljs-built_in">wait</span> 方法释放了锁 ，<span class="hljs-built_in">timeout</span> 是等待时间。<br> */<br>public final native void <span class="hljs-built_in">wait</span>(long <span class="hljs-built_in">timeout</span>) throws InterruptedException<br>/**<br> * 多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 毫秒。。<br> */<br>public final void <span class="hljs-built_in">wait</span>(long <span class="hljs-built_in">timeout</span>, int nanos) throws InterruptedException<br>/**<br> * 跟之前的2个<span class="hljs-built_in">wait</span>方法一样，只不过该方法一直等待，没有超时时间这个概念<br> */<br>public final void <span class="hljs-built_in">wait</span>() throws InterruptedException<br>/**<br> * 实例被垃圾回收器回收的时候触发的操作<br> */<br>protected void finalize() throws Throwable &#123; &#125;<br><br></code></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>面经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
